// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeleHook.Api.Data;

#nullable disable

namespace TeleHook.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250709183249_AddNotificationSettings")]
    partial class AddNotificationSettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("TeleHook.Api.Models.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalSettings")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now', 'utc')");

                    b.Property<bool>("EnableFailureNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnableWebhookLogging")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Warning");

                    b.Property<string>("LogPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("/app/logs/telehook-.log");

                    b.Property<int>("LogRetentionDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(7);

                    b.Property<string>("NotificationBotToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationChatId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationTopicId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatsDaysInterval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(30);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now', 'utc')");

                    b.Property<int>("WebhookLogRetentionDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("AppSetting", t =>
                        {
                            t.HasCheckConstraint("CK_AppSettings_SingleRow", "Id = 1");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnableFailureNotifications = false,
                            EnableWebhookLogging = true,
                            LogLevel = "Warning",
                            LogPath = "/app/logs/telehook-.log",
                            LogRetentionDays = 7,
                            StatsDaysInterval = 30,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WebhookLogRetentionDays = 0
                        });
                });

            modelBuilder.Entity("TeleHook.Api.Models.Bot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BotToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasPassedTest")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Bot");
                });

            modelBuilder.Entity("TeleHook.Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthProvider")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("credentials");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("OidcId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("admin");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OidcId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User", t =>
                        {
                            t.HasCheckConstraint("CK_User_AuthMethod", "(PasswordHash IS NOT NULL AND AuthProvider = 'credentials') OR (OidcId IS NOT NULL AND AuthProvider = 'oidc')");

                            t.HasCheckConstraint("CK_User_AuthProvider", "AuthProvider IN ('credentials', 'oidc')");

                            t.HasCheckConstraint("CK_User_Role", "Role IN ('admin', 'user')");
                        });
                });

            modelBuilder.Entity("TeleHook.Api.Models.Webhook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BotId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DisableNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("DisableWebPagePreview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsProtected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParseMode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("MarkdownV2");

                    b.Property<string>("PayloadSample")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("{}");

                    b.Property<string>("SecretKey")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TopicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BotId")
                        .HasDatabaseName("IX_Webhook_BotId");

                    b.HasIndex("IsDisabled")
                        .HasDatabaseName("IX_Webhook_IsDisabled");

                    b.HasIndex("IsProtected")
                        .HasDatabaseName("IX_Webhook_IsProtected");

                    b.HasIndex("UUID")
                        .IsUnique();

                    b.ToTable("Webhook", t =>
                        {
                            t.HasCheckConstraint("CK_Webhook_ParseMode", "ParseMode IN ('HTML', 'Markdown', 'MarkdownV2')");
                        });
                });

            modelBuilder.Entity("TeleHook.Api.Models.WebhookLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("POST");

                    b.Property<string>("MessageFormatted")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PayloadValidated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProcessingTimeMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestBody")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestHeaders")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("TEXT");

                    b.Property<int>("ResponseStatusCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TelegramResponse")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TelegramSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValidationErrors")
                        .HasColumnType("TEXT");

                    b.Property<int>("WebhookId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_WebhookLog_CreatedAt");

                    b.HasIndex("RequestId")
                        .HasDatabaseName("IX_WebhookLog_RequestId");

                    b.HasIndex("ResponseStatusCode")
                        .HasDatabaseName("IX_WebhookLog_ResponseStatusCode");

                    b.HasIndex("WebhookId")
                        .HasDatabaseName("IX_WebhookLog_WebhookId");

                    b.ToTable("WebhookLogs");
                });

            modelBuilder.Entity("TeleHook.Api.Models.WebhookStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AvgProcessingTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedRequests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("MaxProcessingTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("MinProcessingTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("SuccessfulRequests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("TelegramFailures")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<long>("TotalProcessingTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0L);

                    b.Property<int>("TotalRequests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ValidationFailures")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int?>("WebhookId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_WebhookStat_Date");

                    b.HasIndex("WebhookId")
                        .HasDatabaseName("IX_WebhookStat_WebhookId");

                    b.HasIndex("Date", "WebhookId")
                        .IsUnique()
                        .HasDatabaseName("IX_WebhookStat_Date_Id");

                    b.ToTable("WebhookStat");
                });

            modelBuilder.Entity("TeleHook.Api.Models.Webhook", b =>
                {
                    b.HasOne("TeleHook.Api.Models.Bot", "Bot")
                        .WithMany()
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("TeleHook.Api.Models.WebhookLog", b =>
                {
                    b.HasOne("TeleHook.Api.Models.Webhook", "Webhook")
                        .WithMany()
                        .HasForeignKey("WebhookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Webhook");
                });

            modelBuilder.Entity("TeleHook.Api.Models.WebhookStat", b =>
                {
                    b.HasOne("TeleHook.Api.Models.Webhook", "Webhook")
                        .WithMany()
                        .HasForeignKey("WebhookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Webhook");
                });
#pragma warning restore 612, 618
        }
    }
}
